// Generated by CoffeeScript 1.3.3
(function() {
  var ImageDropper, Zoomer, ZoomerOptions, init;

  init = function() {
    var dropper, options, zoomer;
    dropper = new ImageDropper($('.drop-target'));
    options = new ZoomerOptions($('.controls'));
    zoomer = new Zoomer($('.canvas-wrapper'), options);
    return dropper.onImageDropped = function(img) {
      return options.image(img);
    };
  };

  ZoomerOptions = (function() {

    function ZoomerOptions(element) {
      var _this = this;
      this.element = $(element);
      this.canvasW = ko.observable('940');
      this.canvasH = ko.observable('470');
      this.startW = ko.observable('168');
      this.startH = ko.observable('168');
      this.startX = ko.observable('');
      this.startY = ko.observable('');
      this.step = ko.observable('50');
      this.image = ko.observable();
      ko.applyBindings(this, this.element.get(0));
      this.downloadButton = this.element.find('button.download-image');
      this.image.subscribe(function() {
        return _this.updateDownloadButton();
      });
      this.updateDownloadButton();
    }

    ZoomerOptions.prototype.updateDownloadButton = function() {
      var enable;
      enable = this.image() != null;
      return this.downloadButton.attr('disabled', !enable).toggleClass('btn-primary', enable);
    };

    return ZoomerOptions;

  })();

  Zoomer = (function() {

    function Zoomer(wrapper, options) {
      var observables, property, _i, _len,
        _this = this;
      this.wrapper = wrapper;
      this.options = options;
      observables = "canvasW canvasH startW startH startX startY step image".split(/\s+/);
      for (_i = 0, _len = observables.length; _i < _len; _i++) {
        property = observables[_i];
        options[property].subscribe(function() {
          return _this.render();
        });
      }
      options.downloadButton.click(function() {
        return _this.download();
      });
    }

    Zoomer.prototype.render = function() {
      var ctx, h, img, w, x, y, _i, _len, _ref, _ref1, _results;
      img = this.options.image();
      if (img == null) {
        return;
      }
      this.canvas = $('<canvas/>')[0];
      this.canvas.width = this.getCanvasW();
      this.canvas.height = this.getCanvasH();
      this.wrapper.empty().append(this.canvas);
      ctx = this.canvas.getContext('2d');
      _ref = this.getLayers();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], x = _ref1[0], y = _ref1[1], w = _ref1[2], h = _ref1[3];
        _results.push(ctx.drawImage(img, x, y, w, h));
      }
      return _results;
    };

    Zoomer.prototype.download = function() {
      return window.open(this.canvas.toDataURL());
    };

    Zoomer.prototype.getLayers = function() {
      var h, layers, maxH, maxW, step, w, x, y, _ref, _ref1;
      _ref = [this.getCanvasW(), this.getCanvasH(), this.getStep()], maxW = _ref[0], maxH = _ref[1], step = _ref[2];
      _ref1 = [this.getStartX(), this.getStartY(), this.getStartW(), this.getStartH()], x = _ref1[0], y = _ref1[1], w = _ref1[2], h = _ref1[3];
      layers = [[x, y, w, h]];
      while (x > 0 || y > 0 || x + w < maxW || y + h < maxH) {
        x -= step;
        y -= step;
        w += step * 2;
        h += step * 2;
        layers.unshift([x, y, w, h]);
      }
      return layers;
    };

    Zoomer.prototype.getCanvasW = function() {
      return window.parseInt(this.options.canvasW());
    };

    Zoomer.prototype.getCanvasH = function() {
      return window.parseInt(this.options.canvasH());
    };

    Zoomer.prototype.getStartW = function() {
      return window.parseInt(this.options.startW());
    };

    Zoomer.prototype.getStartH = function() {
      return window.parseInt(this.options.startH());
    };

    Zoomer.prototype.getStartX = function() {
      if (this.options.startX()) {
        return window.parseInt(this.options.startX());
      } else {
        return this.getCanvasW() / 2 - this.getStartW() / 2;
      }
    };

    Zoomer.prototype.getStartY = function() {
      if (this.options.startY()) {
        return window.parseInt(this.options.startY());
      } else {
        return this.getCanvasH() / 2 - this.getStartH() / 2;
      }
    };

    Zoomer.prototype.getStep = function() {
      return window.parseInt(this.options.step());
    };

    return Zoomer;

  })();

  ImageDropper = (function() {

    function ImageDropper(target) {
      var _this = this;
      target = $(target);
      target.bind('dragover', function(event) {
        event.stopPropagation();
        event.preventDefault();
        return target.addClass('dragover');
      }).bind('dragout', function(event) {
        event.stopPropagation();
        event.preventDefault();
        return target.removeClass('dragover');
      }).bind('drop', function(event) {
        event.stopPropagation();
        event.preventDefault();
        target.removeClass('dragover');
        return _this.getImage(event.originalEvent.dataTransfer.files);
      });
    }

    ImageDropper.prototype.getImage = function(files) {
      var reader,
        _this = this;
      reader = new FileReader;
      reader.onload = function(event) {
        var img;
        img = new Image;
        img.src = event.target.result;
        return img.onload = function() {
          if (_this.onImageDropped != null) {
            return _this.onImageDropped(img);
          }
        };
      };
      return reader.readAsDataURL(files[0]);
    };

    return ImageDropper;

  })();

  init();

}).call(this);
