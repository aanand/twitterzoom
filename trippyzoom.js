// Generated by CoffeeScript 1.3.3
(function() {
  var ImageDropper, Zoomer, init;

  init = function() {
    var dropper, zoomer;
    dropper = new ImageDropper($('.drop-target'));
    zoomer = new Zoomer($('.canvas-wrapper'));
    return dropper.onImageDropped = function(img) {
      return zoomer.setImage(img);
    };
  };

  Zoomer = (function() {

    function Zoomer(wrapper) {
      this.wrapper = wrapper;
      this.width = 1200;
      this.height = 600;
      this.step = 50;
    }

    Zoomer.prototype.initCanvas = function() {
      if (this.canvas != null) {
        return;
      }
      this.canvas = $('<canvas/>')[0];
      this.canvas.width = this.width;
      this.canvas.height = this.height;
      return this.wrapper.empty().append(this.canvas);
    };

    Zoomer.prototype.setImage = function(img) {
      var ctx, h, w, x, y, _i, _len, _ref, _ref1, _results;
      this.initCanvas();
      ctx = this.canvas.getContext('2d');
      _ref = this.getLayers();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], x = _ref1[0], y = _ref1[1], w = _ref1[2], h = _ref1[3];
        _results.push(ctx.drawImage(img, x, y, w, h));
      }
      return _results;
    };

    Zoomer.prototype.getLayers = function() {
      var h, layers, w, x, y, _ref;
      _ref = [this.getStartX(), this.getStartY(), this.getStartW(), this.getStartH()], x = _ref[0], y = _ref[1], w = _ref[2], h = _ref[3];
      layers = [[x, y, w, h]];
      while (w < this.width || h < this.height) {
        x -= this.step;
        y -= this.step;
        w += this.step * 2;
        h += this.step * 2;
        layers.unshift([x, y, w, h]);
      }
      return layers;
    };

    Zoomer.prototype.getStartW = function() {
      var _ref;
      return (_ref = this.startW) != null ? _ref : 168;
    };

    Zoomer.prototype.getStartH = function() {
      var _ref;
      return (_ref = this.startH) != null ? _ref : 168;
    };

    Zoomer.prototype.getStartX = function() {
      var _ref;
      return (_ref = this.startX) != null ? _ref : this.width / 2 - this.getStartW() / 2;
    };

    Zoomer.prototype.getStartY = function() {
      var _ref;
      return (_ref = this.startY) != null ? _ref : this.height / 2 - this.getStartH() / 2;
    };

    return Zoomer;

  })();

  ImageDropper = (function() {

    function ImageDropper(target) {
      var _this = this;
      target = $(target);
      target.bind('dragover', function(event) {
        event.stopPropagation();
        event.preventDefault();
        return target.addClass('dragover');
      }).bind('dragout', function(event) {
        event.stopPropagation();
        event.preventDefault();
        return target.removeClass('dragover');
      }).bind('drop', function(event) {
        event.stopPropagation();
        event.preventDefault();
        target.removeClass('dragover');
        return _this.getImage(event.originalEvent.dataTransfer.files);
      });
    }

    ImageDropper.prototype.getImage = function(files) {
      var reader,
        _this = this;
      reader = new FileReader;
      reader.onload = function(event) {
        var img;
        img = new Image;
        img.src = event.target.result;
        return img.onload = function() {
          if (_this.onImageDropped != null) {
            return _this.onImageDropped(img);
          }
        };
      };
      return reader.readAsDataURL(files[0]);
    };

    return ImageDropper;

  })();

  init();

}).call(this);
